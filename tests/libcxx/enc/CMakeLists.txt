# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

# create a binary for each testcase listed in ../tests.supported

include(add_enclave_executable)
include(${CMAKE_CURRENT_LIST_DIR}/../../../cmake/get_testcase_name.cmake)

# helper lib to contain file needed by some tests
add_library(libcxxtest-support
    enc.cpp
    fuzzing.cpp
    memory_resource.cpp
    )

set_target_properties(libcxxtest-support PROPERTIES
    CXX_STANDARD 14
    CXX_STANDARD_REQUIRED YES
    CXX_EXTENSIONS NO
    )

target_compile_options(libcxxtest-support PRIVATE
    -Wno-error=attributes
    -Wno-error=strict-overflow
    -Wno-error=unused-local-typedefs
    -Wno-error=unused-variable
    )

if (CMAKE_CXX_COMPILER_ID MATCHES GNU)
    target_compile_options(libcxxtest-support PRIVATE
      -Wno-error=maybe-uninitialized
      -Wno-error=unused-but-set-variable
      )
endif ()

target_link_libraries(libcxxtest-support PUBLIC oelibcxx oeenclave)
target_link_libraries(libcxxtest-support INTERFACE -Wl,--undefined=Test)

# helper function to create enclave binary
function(add_libcxx_test_enc NAME CXXFILE)
    add_executable(libcxxtest-${NAME}_enc main.cpp)

    target_include_directories(libcxxtest-${NAME}_enc PRIVATE
        ..
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/test
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/test/support
        ${PROJECT_SOURCE_DIR}/3rdparty/libcxx/libcxx/fuzzing
        )

    set_target_properties(libcxxtest-${NAME}_enc PROPERTIES
        CXX_STANDARD 14
        CXX_STANDARD_REQUIRED YES
        CXX_EXTENSIONS NO
        )

    target_compile_options(libcxxtest-${NAME}_enc PRIVATE
        # These are third-party tests, so we don't care about their warnings.
        -Wno-error
        # Remove NDEBUG to enable the libcxx testsuite assertions in Release
        -UNDEBUG
        )

    # Clang does not support variants of operator delete[] taking size_t in C++14 unless
    # -fsized-deallocation is passed explicity. (Note, gcc 4.7/4.8/4.9 do not support this either.)
    # NOTE: This only matters when `ENABLE_FULL_LIBCXX_TESTS=ON`.
    if (NAME MATCHES "sized_delete")
        target_compile_options(libcxxtest-${NAME}_enc PRIVATE -fsized-deallocation)
    endif()

    target_compile_definitions(libcxxtest-${NAME}_enc PRIVATE -DWITH_MAIN -D__TEST__="${CXXFILE}")
    target_link_libraries(libcxxtest-${NAME}_enc libcxxtest-support oeenclave)
endfunction(add_libcxx_test_enc)

# iterate over the supported tests and create a binary for each.
if (ENABLE_FULL_LIBCXX_TESTS)
    file(STRINGS "../tests.supported" alltests)
else()
    file(STRINGS "../tests.supported.default" alltests)
endif()
foreach(testcase ${alltests})
    get_testcase_name(${testcase} name "../../3rdparty/libcxx/libcxx/test/")

# the allocations are entirely optimized out by Clang in these tests and are excluded from Clang release builds
    if ("${name}" MATCHES "cons_default_throws_bad_alloc.pass" OR "${name}" MATCHES "allocator_allocator.members_construct.pass")
        string(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_TYPE_UPPER)
        if (CMAKE_CXX_COMPILER_ID MATCHES Clang AND BUILD_TYPE_UPPER MATCHES REL)
            continue()
	endif()
    endif()

    add_libcxx_test_enc("${name}" "${testcase}")
endforeach(testcase)
